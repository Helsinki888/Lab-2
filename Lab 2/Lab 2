import random 
import numpy as np 

NUM_CITIES = 5
NUM_ANTS = 10
NUM_ITERATIONS = 100
ALPHA = 1.0
BETA = 2.0
EVAPORATION = 0.5
Q = 100

distances = np.random.randint(1, 100, size=(NUM_CITIES, NUM_CITIES))
np.fill_diagonal(distances, 0)
pheromones = np.ones((NUM_CITIES, NUM_CITIES))

def calculate_path_length(path):
    return sum(distances[path[i]][path[i+1]] for i in range(len(path) - 1)) + distances[path[-1]][path[0]]

def choose_next_city(current_city, visited):
    probabilities = []
    for city in range(NUM_CITIES):
        if city not in visited:
            tau = pheromones[current_city][city] ** ALPHA
            eta = (1 / distances[current_city][city]) ** BETA
            probabilities.append(tau * eta)
        else:
            probabilities.append(0)
    total = sum(probabilities)
    probabilities = [p / total if total > 0 else 0 for p in probabilities]
    return random.choices(range(NUM_CITIES), weights=probabilities)[0]

def ant_walk():
    path = [random.randint(0, NUM_CITIES - 1)]
    visited = set(path)
    while len(path) < NUM_CITIES:
        next_city = choose_next_city(path[-1], visited)
        path.append(next_city)
        visited.add(next_city)
    return path

def update_pheromones(all_paths):
    global pheromones
    pheromones *= (1 - EVAPORATION)
    for path in all_paths:
        length = calculate_path_length(path)
        for i in range(NUM_CITIES):
            a, b = path[i], path[(i+1) % NUM_CITIES]
            pheromones[a][b] += Q / length
            pheromones[b][a] += Q / length

best_path = None
best_length = float('inf')
for iteration in range(NUM_ITERATIONS):
    all_paths = [ant_walk() for _ in range(NUM_ANTS)]
    for path in all_paths:
        length = calculate_path_length(path)
        if length < best_length:
            best_length = length
            best_path = path
    update_pheromones(all_paths)
    print(f"Iteration {iteration+1}: Best length so far = {best_length}")

print("Best path found:", best_path)
print("Path length:", best_length)
